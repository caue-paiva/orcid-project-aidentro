# Generated by Django 5.2.1 on 2025-06-22 16:43

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('orcid_id', models.CharField(blank=True, help_text='16-digit ORCID identifier', max_length=19, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Invalid ORCID ID format. Should be: 0000-0000-0000-000X', regex='^\\d{4}-\\d{4}-\\d{4}-\\d{3}[\\dX]$')])),
                ('orcid_access_token', models.TextField(blank=True, help_text='Encrypted ORCID access token', null=True)),
                ('orcid_refresh_token', models.TextField(blank=True, help_text='Encrypted ORCID refresh token', null=True)),
                ('orcid_token_expires_at', models.DateTimeField(blank=True, null=True)),
                ('display_name', models.CharField(blank=True, max_length=255)),
                ('biography', models.TextField(blank=True)),
                ('profile_picture_url', models.URLField(blank=True)),
                ('website_url', models.URLField(blank=True)),
                ('profile_public', models.BooleanField(default=True)),
                ('show_publications', models.BooleanField(default=True)),
                ('show_affiliations', models.BooleanField(default=True)),
                ('show_metrics', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_orcid_sync', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='APIUsageLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('ip_address', models.GenericIPAddressField()),
                ('endpoint', models.CharField(max_length=200)),
                ('method', models.CharField(max_length=10)),
                ('user_agent', models.TextField(blank=True)),
                ('status_code', models.IntegerField()),
                ('response_time_ms', models.IntegerField(help_text='Response time in milliseconds')),
                ('rate_limit_key', models.CharField(blank=True, max_length=100)),
                ('requests_in_window', models.IntegerField(default=1)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'api_usage_logs',
            },
        ),
        migrations.CreateModel(
            name='CitationTimeSeries',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('year', models.IntegerField()),
                ('citations_count', models.IntegerField(default=0, help_text='Number of citations received in this year')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='citation_timeseries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'citation_timeseries',
            },
        ),
        migrations.CreateModel(
            name='Funding',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=500)),
                ('funding_type', models.CharField(choices=[('grant', 'Grant'), ('contract', 'Contract'), ('award', 'Award'), ('fellowship', 'Fellowship'), ('salary-award', 'Salary Award'), ('other', 'Other')], max_length=20)),
                ('organization_name', models.CharField(max_length=500)),
                ('organization_country', models.CharField(blank=True, max_length=100)),
                ('grant_number', models.CharField(blank=True, max_length=200)),
                ('amount', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('currency', models.CharField(blank=True, help_text='ISO currency code', max_length=3)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('description', models.TextField(blank=True)),
                ('url', models.URLField(blank=True)),
                ('orcid_put_code', models.CharField(blank=True, max_length=50)),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('limited', 'Limited'), ('private', 'Private')], default='public', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='funding', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'funding',
            },
        ),
        migrations.CreateModel(
            name='Institution',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=500)),
                ('short_name', models.CharField(blank=True, max_length=100)),
                ('country', models.CharField(max_length=100)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('ror_id', models.CharField(blank=True, help_text='Research Organization Registry ID', max_length=200)),
                ('grid_id', models.CharField(blank=True, help_text='Global Research Identifier Database ID', max_length=200)),
                ('wikidata_id', models.CharField(blank=True, max_length=50)),
                ('website_url', models.URLField(blank=True)),
                ('logo_url', models.URLField(blank=True)),
                ('established_year', models.IntegerField(blank=True, null=True)),
                ('institution_type', models.CharField(choices=[('university', 'University'), ('research_institute', 'Research Institute'), ('government', 'Government Agency'), ('company', 'Company'), ('hospital', 'Hospital'), ('other', 'Other')], default='university', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'institutions',
                'indexes': [models.Index(fields=['name'], name='institution_name_e35db9_idx'), models.Index(fields=['country'], name='institution_country_8b7928_idx'), models.Index(fields=['ror_id'], name='institution_ror_id_d4aa75_idx')],
            },
        ),
        migrations.CreateModel(
            name='Affiliation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('affiliation_type', models.CharField(choices=[('employment', 'Employment'), ('education', 'Education'), ('distinction', 'Distinction'), ('invited_position', 'Invited Position'), ('membership', 'Membership'), ('qualification', 'Qualification'), ('service', 'Service')], max_length=20)),
                ('title', models.CharField(help_text='Job title, degree, position, etc.', max_length=500)),
                ('department', models.CharField(blank=True, max_length=500)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('is_current', models.BooleanField(default=False)),
                ('orcid_put_code', models.CharField(blank=True, help_text='ORCID put-code for this affiliation', max_length=50)),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('limited', 'Limited'), ('private', 'Private')], default='public', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='affiliations', to=settings.AUTH_USER_MODEL)),
                ('institution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='affiliations', to='config.institution')),
            ],
            options={
                'db_table': 'affiliations',
            },
        ),
        migrations.CreateModel(
            name='ResearchArea',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('description', models.TextField(blank=True)),
                ('subject_scheme', models.CharField(blank=True, help_text='Classification scheme (e.g., OECD FOS)', max_length=100)),
                ('subject_scheme_uri', models.URLField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='config.researcharea')),
            ],
            options={
                'db_table': 'research_areas',
            },
        ),
        migrations.CreateModel(
            name='UserMetrics',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('total_publications', models.IntegerField(default=0)),
                ('total_citations', models.IntegerField(default=0)),
                ('h_index', models.IntegerField(default=0)),
                ('i10_index', models.IntegerField(default=0)),
                ('years_active', models.IntegerField(default=0)),
                ('first_publication_year', models.IntegerField(blank=True, null=True)),
                ('last_publication_year', models.IntegerField(blank=True, null=True)),
                ('avg_citations_per_paper', models.FloatField(default=0.0)),
                ('max_citations_single_paper', models.IntegerField(default=0)),
                ('total_collaborators', models.IntegerField(default=0)),
                ('total_institutions', models.IntegerField(default=0)),
                ('total_countries', models.IntegerField(default=0)),
                ('last_calculated', models.DateTimeField(auto_now=True)),
                ('calculation_version', models.CharField(default='1.0', max_length=20)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_metrics',
            },
        ),
        migrations.CreateModel(
            name='UserResearchArea',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_primary', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('research_area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='config.researcharea')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='research_areas', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_research_areas',
            },
        ),
        migrations.CreateModel(
            name='Work',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.TextField()),
                ('work_type', models.CharField(choices=[('journal-article', 'Journal Article'), ('book-chapter', 'Book Chapter'), ('book', 'Book'), ('conference-paper', 'Conference Paper'), ('dataset', 'Dataset'), ('software', 'Software'), ('report', 'Report'), ('preprint', 'Preprint'), ('thesis', 'Thesis'), ('patent', 'Patent'), ('other', 'Other')], max_length=30)),
                ('journal_title', models.CharField(blank=True, max_length=500)),
                ('publication_date', models.DateField(blank=True, null=True)),
                ('publication_year', models.IntegerField(blank=True, null=True)),
                ('doi', models.CharField(blank=True, max_length=200, null=True, unique=True)),
                ('pmid', models.CharField(blank=True, help_text='PubMed ID', max_length=20)),
                ('isbn', models.CharField(blank=True, max_length=20)),
                ('issn', models.CharField(blank=True, max_length=20)),
                ('arxiv_id', models.CharField(blank=True, max_length=50)),
                ('abstract', models.TextField(blank=True)),
                ('keywords', models.JSONField(blank=True, default=list)),
                ('language', models.CharField(default='en', max_length=10)),
                ('url', models.URLField(blank=True, help_text='Primary URL for the work')),
                ('pdf_url', models.URLField(blank=True)),
                ('orcid_put_code', models.CharField(blank=True, max_length=50)),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('limited', 'Limited'), ('private', 'Private')], default='public', max_length=20)),
                ('citation_count', models.IntegerField(default=0)),
                ('last_citation_update', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'works',
                'indexes': [models.Index(fields=['doi'], name='works_doi_2f7be9_idx'), models.Index(fields=['publication_year'], name='works_publica_fc961b_idx'), models.Index(fields=['work_type'], name='works_work_ty_305a2e_idx'), models.Index(fields=['citation_count'], name='works_citatio_30d241_idx')],
            },
        ),
        migrations.CreateModel(
            name='CollaborationNetwork',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('total_collaborations', models.IntegerField(default=1)),
                ('first_collaboration_date', models.DateField()),
                ('last_collaboration_date', models.DateField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collaborations_as_user1', to=settings.AUTH_USER_MODEL)),
                ('user2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collaborations_as_user2', to=settings.AUTH_USER_MODEL)),
                ('shared_works', models.ManyToManyField(blank=True, to='config.work')),
            ],
            options={
                'db_table': 'collaboration_networks',
            },
        ),
        migrations.CreateModel(
            name='Citation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('citation_context', models.TextField(blank=True, help_text='Text around the citation')),
                ('page_number', models.CharField(blank=True, max_length=20)),
                ('source', models.CharField(choices=[('crossref', 'CrossRef'), ('pubmed', 'PubMed'), ('semantic_scholar', 'Semantic Scholar'), ('google_scholar', 'Google Scholar'), ('manual', 'Manual Entry')], default='crossref', max_length=50)),
                ('discovered_at', models.DateTimeField(auto_now_add=True)),
                ('cited_work', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='citations_received', to='config.work')),
                ('citing_work', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='citations_made', to='config.work')),
            ],
            options={
                'db_table': 'citations',
            },
        ),
        migrations.CreateModel(
            name='WorkAuthor',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=500)),
                ('orcid_id', models.CharField(blank=True, max_length=19)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('affiliation_name', models.CharField(blank=True, max_length=500)),
                ('author_order', models.IntegerField(help_text='Order of authorship (1 = first author)')),
                ('is_corresponding', models.BooleanField(default=False)),
                ('contribution_roles', models.JSONField(blank=True, default=list, help_text='CRediT taxonomy roles')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='authored_works', to=settings.AUTH_USER_MODEL)),
                ('work', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='authors', to='config.work')),
            ],
            options={
                'db_table': 'work_authors',
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['orcid_id'], name='users_orcid_i_52a14e_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['created_at'], name='users_created_6541e9_idx'),
        ),
        migrations.AddIndex(
            model_name='apiusagelog',
            index=models.Index(fields=['user', 'timestamp'], name='api_usage_l_user_id_786284_idx'),
        ),
        migrations.AddIndex(
            model_name='apiusagelog',
            index=models.Index(fields=['ip_address', 'timestamp'], name='api_usage_l_ip_addr_6a2ed2_idx'),
        ),
        migrations.AddIndex(
            model_name='apiusagelog',
            index=models.Index(fields=['endpoint'], name='api_usage_l_endpoin_133785_idx'),
        ),
        migrations.AddIndex(
            model_name='apiusagelog',
            index=models.Index(fields=['rate_limit_key', 'timestamp'], name='api_usage_l_rate_li_9408f9_idx'),
        ),
        migrations.AddIndex(
            model_name='citationtimeseries',
            index=models.Index(fields=['user', 'year'], name='citation_ti_user_id_86f0c5_idx'),
        ),
        migrations.AddIndex(
            model_name='citationtimeseries',
            index=models.Index(fields=['year'], name='citation_ti_year_0a413e_idx'),
        ),
        migrations.AddIndex(
            model_name='citationtimeseries',
            index=models.Index(fields=['citations_count'], name='citation_ti_citatio_cf5015_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='citationtimeseries',
            unique_together={('user', 'year')},
        ),
        migrations.AddIndex(
            model_name='funding',
            index=models.Index(fields=['user'], name='funding_user_id_f7c8ce_idx'),
        ),
        migrations.AddIndex(
            model_name='funding',
            index=models.Index(fields=['organization_name'], name='funding_organiz_d06f74_idx'),
        ),
        migrations.AddIndex(
            model_name='funding',
            index=models.Index(fields=['start_date'], name='funding_start_d_748833_idx'),
        ),
        migrations.AddIndex(
            model_name='affiliation',
            index=models.Index(fields=['user', 'affiliation_type'], name='affiliation_user_id_83c002_idx'),
        ),
        migrations.AddIndex(
            model_name='affiliation',
            index=models.Index(fields=['institution'], name='affiliation_institu_c7015d_idx'),
        ),
        migrations.AddIndex(
            model_name='affiliation',
            index=models.Index(fields=['is_current'], name='affiliation_is_curr_f0e4e3_idx'),
        ),
        migrations.AddIndex(
            model_name='researcharea',
            index=models.Index(fields=['name'], name='research_ar_name_2cebfe_idx'),
        ),
        migrations.AddIndex(
            model_name='researcharea',
            index=models.Index(fields=['parent'], name='research_ar_parent__224f08_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userresearcharea',
            unique_together={('user', 'research_area')},
        ),
        migrations.AddIndex(
            model_name='collaborationnetwork',
            index=models.Index(fields=['user1'], name='collaborati_user1_i_213a3d_idx'),
        ),
        migrations.AddIndex(
            model_name='collaborationnetwork',
            index=models.Index(fields=['user2'], name='collaborati_user2_i_95103b_idx'),
        ),
        migrations.AddIndex(
            model_name='collaborationnetwork',
            index=models.Index(fields=['total_collaborations'], name='collaborati_total_c_f9c7fe_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='collaborationnetwork',
            unique_together={('user1', 'user2')},
        ),
        migrations.AddIndex(
            model_name='citation',
            index=models.Index(fields=['cited_work'], name='citations_cited_w_0c7931_idx'),
        ),
        migrations.AddIndex(
            model_name='citation',
            index=models.Index(fields=['citing_work'], name='citations_citing__20aaff_idx'),
        ),
        migrations.AddIndex(
            model_name='citation',
            index=models.Index(fields=['discovered_at'], name='citations_discove_7ff864_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='citation',
            unique_together={('citing_work', 'cited_work')},
        ),
        migrations.AddIndex(
            model_name='workauthor',
            index=models.Index(fields=['work', 'author_order'], name='work_author_work_id_694594_idx'),
        ),
        migrations.AddIndex(
            model_name='workauthor',
            index=models.Index(fields=['user'], name='work_author_user_id_e4db4d_idx'),
        ),
        migrations.AddIndex(
            model_name='workauthor',
            index=models.Index(fields=['orcid_id'], name='work_author_orcid_i_8d85f0_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='workauthor',
            unique_together={('work', 'author_order')},
        ),
    ]
